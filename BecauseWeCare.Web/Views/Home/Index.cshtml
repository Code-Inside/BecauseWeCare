@{
    ViewBag.Title = " Dashboard";
}
<!-- Masthead
================================================== -->
<header class="jumbotron subhead" id="overview">
    <h1>Because we care!</h1>
    <p class="lead">Stats about Microsoft's UserVoice sites</p>
</header>

<div class="row">
    <div class="span12">
        <h2>Categories</h2>
        <div id="categoriesContainer" style="min-width: 800px; height: 600px; margin: 0 auto"></div>
    </div>
</div>

<div class="row">
    <div class="span12">
        <h2>Categories with status insight</h2>
        <div id="categoriesWithStatusInsightContainer" style="min-width: 400px; height: 800px; margin: 0 auto"></div>
    </div>
</div>

@section scripts
{
    <script language="javascript" type="text/javascript">
        
        var WebApp = WebApp || {};
        WebApp.Controls = WebApp.Controls || {};
        WebApp.Controls.Charts = WebApp.Controls.Charts || { 
            StackedBarForByCategoriesWithStatus: function() {
                var chartOptions = {
                    chart: {
                        type: 'column'
                    },
                    title: {
                        text: 'Suggestions per Category with Status'
                    },
                    xAxis: {
                        categories: []
                    },
                    yAxis: {
                        min: 0,
                        title: {
                            text: 'Number of Suggestions'
                        },
                        stackLabels: {
                            enabled: true,
                            style: {
                                fontWeight: 'bold',
                                color: (Highcharts.theme && Highcharts.theme.textColor) || 'gray'
                            }
                        }
                    },
                    legend: {
                        align: 'right',
                        x: -100,
                        verticalAlign: 'top',
                        y: 20,
                        floating: true,
                        backgroundColor: (Highcharts.theme && Highcharts.theme.legendBackgroundColorSolid) || 'white',
                        borderColor: '#CCC',
                        borderWidth: 1,
                        shadow: false
                    },
                    plotOptions: {
                        column: {
                            stacking: 'normal',
                            dataLabels: {
                                enabled: true,
                                color: (Highcharts.theme && Highcharts.theme.dataLabelsColor) || 'white'
                            }
                        }
                    },
                    series: []
                };

                return chartOptions;
            },
            PieForCategories: function () {
                var chartOptions = {
                    title: {
                        text: 'Category Overview'
                    },
                    series: [{
                        type: 'pie',
                        name: 'Categories',
                        data: []}]
                };

                return chartOptions;
            }
        };

        
        $(function () {

            var stackedBarOptions = WebApp.Controls.Charts.StackedBarForByCategoriesWithStatus();
            var pieOptions = WebApp.Controls.Charts.PieForCategories();

            $.getJSON('@Url.HttpRouteUrl("RpcApi", new { controller="Analytics", action="ByCategory" })', function (result) {
                // categories for x-Axis & Pie
                for (var xAxisI in result.CategoriesAndCount) {
                    var xAxiscategory = result.CategoriesAndCount[xAxisI].Key;
                    stackedBarOptions.xAxis.categories.push(xAxiscategory);
                    
                    var pieValueToPush = {};
                    pieValueToPush["name"] = result.CategoriesAndCount[xAxisI].Key;
                    pieValueToPush["y"] = result.CategoriesAndCount[xAxisI].Value;
                    pieOptions.series[0].data.push(pieValueToPush);

                }

                // status entries
                for (var i in result.PerStatusInsight) {
                    var status = result.PerStatusInsight[i];

                    var name = "";
                    if (status.StatusName == undefined) {
                        name = "no status";
                    }
                    else {
                        name = status.StatusName;
                    }
                    
                    var color = "";
                    if (status.HexColor == undefined) {
                        color = "#FFB302";
                    }
                    else {
                        color = status.HexColor;
                    }


                    var data = new Array();

                    for (var dataI in status.Count) {
                        data.push(status.Count[dataI]);
                    }

                    var valueToPush = {}; 
                    valueToPush["name"] = name;
                    valueToPush["color"] = color;
                    valueToPush["data"] = data;
                    stackedBarOptions.series.push(valueToPush);

                }

                $('#categoriesWithStatusInsightContainer').highcharts(stackedBarOptions);
                $('#categoriesContainer').highcharts(pieOptions);

            });

        });

    </script>
}
